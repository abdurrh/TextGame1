class Character:
    def __init__(self, name, race, stats):
        self.name = name
        self.race = race
        self.stats = stats  # Dictionary of stats
        self.level = 1
    # Methods to update stats, level up, etc.
  import json

# --- Utility to Load Race Data ---
def load_races(filename="races.json"):
    with open(filename, "r") as f:
        return json.load(f)

# --- Character Class ---
class Character:
    def __init__(self, name, race, stats):
        self.name = name
        self.race = race
        self.stats = stats  # dict: {"Strength": X, ...}
        self.xp = {stat: 0 for stat in stats}
        self.level = {stat: stats[stat] for stat in stats}

    # Use a skill, gain XP in that stat
    def use_skill(self, stat, xp_gain):
        self.xp[stat] += xp_gain
        needed_xp = self.get_needed_xp(stat)
        if self.xp[stat] >= needed_xp:
            self.level[stat] += 1
            self.stats[stat] += 1   # Actually improve the stat
            self.xp[stat] -= needed_xp  # Carry over excess XP

    # XP needed increases with stat (luck harder to level)
    def get_needed_xp(self, stat):
        multiplier = 20 if stat == "Luck" else 10
        return self.level[stat] * multiplier

# --- Character Creation ---
def create_custom_race():
    available_points = 30
    stats = ["Strength", "Agility", "Defence", "Luck", "Life", "Wisdom", "Charisma"]
    custom_stats = {}
    print("Allocate 30 points among the following stats:")
    for stat in stats:
        points = int(input(f"{stat}: (remaining {available_points}): "))
        points = max(0, min(points, available_points))
        custom_stats[stat] = points
        available_points -= points
    # auto-fill remainder to last stat, if needed
    if available_points > 0:
        last_stat = stats[-1]
        custom_stats[last_stat] += available_points
    return custom_stats

def choose_race(races):
    print("Available Races:")
    for i, race in enumerate(list(races.keys()) + ["Custom"]):
        print(f"{i+1}. {race}")
    choice = int(input("Choose a race by number: "))
    if choice == len(races) + 1:
        stats = create_custom_race()  # Custom race
        return "Custom", stats
    else:
        race = list(races.keys())[choice-1]
        return race, races[race]

# --- Main ---
if __name__ == "__main__":
    races = load_races()  # Load races from JSON
    name = input("Enter your character's name: ")
    race, stats = choose_race(races)
    player = Character(name, race, stats)
    print(f"Created character {player.name} the {player.race} with stats: {player.stats}")
